[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'

[[plugins]]
repo = 'williamboman/mason.nvim'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
lua_post_source = '''
  local on_attach = function(client, bufnr)
    local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end

    local opts = { noremap = true, silent = true }
    buf_set_keymap("n", "K", "<cmd>lua vim.lsp.buf.hover()<CR>", opts)
    buf_set_keymap("n", "gD", "<cmd>lua vim.lsp.buf.declaration()<CR>", opts)
    buf_set_keymap("n", "gd", "<cmd>lua vim.lsp.buf.definition()<CR>", opts)
    buf_set_keymap("n", "gvd", "<cmd>:vsp<CR><cmd>lua vim.lsp.buf.definition()<CR>", opts)
    buf_set_keymap("n", "gsd", "<cmd>:sp<CR><cmd>lua vim.lsp.buf.definition()<CR>", opts)
    buf_set_keymap("n", "gi", "<cmd>lua vim.lsp.buf.implementation()<CR>", opts)
    buf_set_keymap("n", "gr", "<cmd>lua vim.lsp.buf.references()<CR>", opts)
    buf_set_keymap('n', 'gt', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
    buf_set_keymap("n", "gn", "<cmd>lua vim.lsp.buf.rename()<CR>", opts)
    buf_set_keymap("n", "gf", "<cmd>lua vim.lsp.buf.format { async = true }<CR>", opts)
    buf_set_keymap('n', 'ge', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
    buf_set_keymap("n", "<C-k>", "<cmd>lua vim.lsp.buf.signature_help()<CR>", opts)
    buf_set_keymap("n", "<space>wa", "<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>", opts)
    buf_set_keymap("n", "<space>wr", "<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>", opts)
    buf_set_keymap("n", "<space>wl", "<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>", opts)
    buf_set_keymap("n", "<space>D", "<cmd>lua vim.lsp.buf.type_definition()<CR>", opts)
    buf_set_keymap("n", "<space>ca", "<cmd>lua vim.lsp.buf.code_action()<CR>", opts)
    buf_set_keymap("n", "<space>e", "<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>", opts)
    buf_set_keymap("n", "[d", "<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>", opts)
    buf_set_keymap("n", "]d", "<cmd>lua vim.lsp.diagnostic.goto_next()<CR>", opts)
    buf_set_keymap("n", "<space>q", "<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>", opts)
  end

  local capabilities = require('cmp_nvim_lsp').default_capabilities()
  capabilities.textDocument.completion.completionItem.snippetSupport = true

  vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
    vim.lsp.diagnostic.on_publish_diagnostics, {
      underline = true,
      virtual_text = true,
      signs = true,
      update_in_insert = false,
    }
  )
  -- diagnostic sign setting
  -- local signs = { Error = "üôÖ", Warn = "‚ö†Ô∏è", Hint = "üí°", Info = "‚Ñπ" }
  local signs = { Error = "üôÖ", Warn = "üôá", Hint = "üíÅ", Info = "üôã" }
  for type, icon in pairs(signs) do
    local hl = "DiagnosticSign" .. type
    vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = hl })
  end

  local nvim_lsp = require("lspconfig")
  require("mason").setup({
    ui = {
      icons = {
        package_installed = "‚úì",
        package_pending = "‚ûú",
        package_uninstalled = "‚úó"
      }
    }
  })
  -- require("mason-lspconfig").setup()
  require("mason-lspconfig").setup_handlers {
    function(server_name)
      local opt = {
        on_attach = on_attach,
        capabilities = capabilities,
      }
      if server_name == "gopls" then
        opt.settings = {
          gopls = {
            env = { GOFLAGS = "-tags=integration,!integration,wireinject" },
            gofumpt = true,
          },
        }
      elseif server_name == "tsserver" then
        -- package.json „Å® deno.json „Åå„ÅÇ„Çã„Éá„Ç£„É¨„ÇØ„Éà„É™Â†¥Âêà„ÅØ tsserver „Çí‰Ωø„ÅÜ
        opt.root_dir = nvim_lsp.util.root_pattern("package.json")
      elseif server_name == "denols" then
        opt.root_dir = nvim_lsp.util.root_pattern("deno.json")
      end
      nvim_lsp[server_name].setup(opt)
    end
  }
'''
