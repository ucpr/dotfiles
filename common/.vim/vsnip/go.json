{
  "iferr": {
    "prefix": "iferr",
    "description": "Expansion `if err != nil ...`",
    "body": [
      "if err != nil {",
      "\t$1",
      "}"
    ]
  },
  "ims": {
    "prefix": "ims",
    "body": [
      "import (",
      "\t$1",
      ")"
    ]
  },
  "struct": {
    "prefix": "tys",
    "description": "struct T { ... }",
    "body": [
      "type $1 struct {",
      "\t$2",
      "}"
    ]
  },
  "interface": {
    "prefix": "tyi",
    "description": "interface I { ... }",
    "body": [
      "type $1 interface {",
      "\t$2",
      "}"
    ]
  },
  "error return": {
    "prefix": "rerr",
    "description": "if err != nil { return err }",
    "body": [
      "if err != nil {",
      "\treturn err",
      "}"
    ]
  },
  "error panic": {
    "prefix": "perr",
    "description": "if err != nil { return panic(err) }",
    "body": [
      "if err != nil {",
      "\tpanic(err)",
      "}"
    ]
  },
  "tdd func": {
    "prefix": "ftdd",
    "description": "table driven test",
    "body": [
      "func Test$1(t *testing.T) {",
      "\tt.Parallel()",
      "",
      "\tpatterns := []struct {",
      "\t\tname string",
      "\t}{",
      "\t\t{",
      "\t\t\tname: \"success\",",
      "\t\t},",
      "\t}",
      "",
      "\tfor _, tt := range patterns {",
      "\t\ttt := tt",
      "\t\tt.Run(tt.name, func(t *testing.T) {",
      "\t\t\tt.Parallel()",
      "",
      "\t\t\t$3",
      "\t\t})",
      "\t}",
      "}"
    ]
  },
  "empty func": {
    "prefix": "func",
    "description": "empty func",
    "body": [
      "func $1() {",
      "\t$2",
      "}"
    ]
  },
  "anonymous function goroutine": {
    "prefix": "gof",
    "description": "",
    "body": [
      "go func(){",
      "\t$2",
      "}"
    ]
  },
  "graceful shutdown": {
    "prefix": "shutdown",
    "description": "graceful shutdown",
    "body": [
      "ctx, cancel := signal.NotifyContext(context.Background(), syscall.SIGTERM, syscall.SIGINT)",
      "defer cancel()",
      "<-ctx.Done()",
      "log.Info(\"root context canceled, shutdown\")"
    ]
  },
  "check interface": {
    "prefix": "ifcheck",
    "description": "inteface check",
    "body": [
      "var _ ${1:interface} = (*${2:struct})(nil)"
    ]
  }
}
